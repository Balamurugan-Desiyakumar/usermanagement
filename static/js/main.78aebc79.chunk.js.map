{"version":3,"sources":["home/Home.js","HttpInterceptor.js","user-list/UserList.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Component","axios","interceptors","request","use","a","config","url","process","HttpInterceptor","users","handleShow","item","e","setState","show","handleClose","state","get","then","res","data","members","console","log","columns","label","field","sort","width","rows","this","i","length","action","className","class","alt","onClick","bind","Container","striped","bordered","hover","Modal","onHide","size","Header","closeButton","Title","Body","Footer","Button","variant","App","basename","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qNAEqBA,E,uKAEb,OACI,6BACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,cAAT,qB,GAVMC,a,iGCClCC,IAAMC,aAAaC,QAAQC,IAA3B,+BAAAC,EAAA,MAA+B,WAAOC,GAAP,SAAAD,EAAA,6DAC3BC,EAAOC,IAAMC,yBAAgCF,EAAOC,IADzB,kBAEpBD,GAFoB,2CAA/B,uDAKO,IAAMG,EAAkBR,ICKVS,E,kDAEjB,aAAe,IAAD,8BACV,gBAgBJC,WAAa,SAACC,EAAMC,GAChB,EAAKC,SAAS,CAAEC,MAAM,KAlBZ,EAqBdC,YAAc,WACV,EAAKF,SAAS,CAAEC,MAAM,KApBtB,EAAKE,MAAQ,CACTP,MAAO,GACPK,MAAM,GAJA,E,gEAQO,IAAD,OAChBN,EAAgBS,IAAI,cAAcC,MAAK,SAAAC,GACnC,EAAKN,SAAS,CAAEJ,MAAOU,EAAIC,KAAKC,UAEhCC,QAAQC,IAAI,EAAKP,MAAMP,Y,+BAe3B,IAAMW,EAAO,CACTI,QAAS,CACL,CACIC,MAAO,QACPC,MAAO,KACPC,KAAM,MACNC,MAAO,KAEX,CACIH,MAAO,YACPC,MAAO,YACPC,KAAM,MACNC,MAAO,KAEX,CACIH,MAAO,YACPC,MAAO,KACPC,KAAM,MACNC,MAAO,KAEX,CACIH,MAAO,SACPC,MAAO,UACPC,KAAM,MACNC,MAAO,MAIfC,KAAM,IAGVT,EAAKS,KAAOC,KAAKd,MAAMP,MACvB,IAAK,IAAIsB,EAAI,EAAGA,EAAID,KAAKd,MAAMP,MAAMuB,OAAQD,IAAK,CAC9C,IAAIE,EAAS,yBAAKC,UAAU,UACxB,uBAAGC,MAAM,cAAcC,IAAI,OAAOC,QAASP,KAAKpB,WAAW4B,KAAKR,KAAMV,EAAKS,KAAKE,OAKpFX,EAAKS,KAAKE,GAAV,QAA0BE,EAI9B,OACI,kBAACM,EAAA,EAAD,KACI,yCAQA,kBAAC,IAAD,CACIC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLtB,KAAMA,IAGV,kBAACuB,EAAA,EAAD,CAAO7B,KAAMgB,KAAKd,MAAMF,KAAM8B,OAAQd,KAAKf,YAAa8B,KAAK,MACzD,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,uBAEJ,kBAACL,EAAA,EAAMM,KAAP,qDACA,kBAACN,EAAA,EAAMO,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYf,QAASP,KAAKf,aAA1C,SAGA,kBAACoC,EAAA,EAAD,CAAQC,QAAQ,UAAUf,QAASP,KAAKf,aAAxC,uB,GAlGWhB,aCJpB,SAASsD,IACpB,OACI,kBAAC,IAAD,CAAQC,SAAS,mBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACjB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,KAAK,cACR,kBAAC,EAAD,SCRLF,MANf,WACE,OACE,kBAAC,EAAD,OCOgBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.78aebc79.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/user-list\">User List</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\naxios.interceptors.request.use(async (config) => {\r\n    config.url = process.env.REACT_APP_API_URL + config.url;\r\n    return config;\r\n})\r\n\r\nexport const HttpInterceptor = axios;\r\n","import React, { Component } from 'react';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport { Container, Modal, Button } from \"react-bootstrap\";\r\nimport { HttpInterceptor } from \"../HttpInterceptor\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class users extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: [],\r\n            show: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        HttpInterceptor.get('user-lists').then(res => {\r\n            this.setState({ users: res.data.members })\r\n            debugger;\r\n            console.log(this.state.users)\r\n        })\r\n\r\n    }\r\n\r\n    handleShow = (item, e) => {\r\n        this.setState({ show: true })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ show: false })\r\n    }\r\n\r\n    render() {\r\n\r\n        const data = {\r\n            columns: [\r\n                {\r\n                    label: 'Sl No',\r\n                    field: 'id',\r\n                    sort: 'asc',\r\n                    width: 150\r\n                },\r\n                {\r\n                    label: 'User Name',\r\n                    field: 'real_name',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Time Zone',\r\n                    field: 'tz',\r\n                    sort: 'asc',\r\n                    width: 200\r\n                },\r\n                {\r\n                    label: 'Action',\r\n                    field: 'actions',\r\n                    sort: 'asc',\r\n                    width: 100\r\n                },\r\n\r\n            ],\r\n            rows: []\r\n        };\r\n\r\n        data.rows = this.state.users;\r\n        for (let i = 0; i < this.state.users.length; i++) {\r\n            let action = <div className=\"icoBtn\">\r\n                <i class=\"fas fa-edit\" alt=\"Edit\" onClick={this.handleShow.bind(this, data.rows[i])}></i>\r\n\r\n\r\n            </div>;\r\n\r\n            data.rows[i]['actions'] = action;\r\n\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <h1>User List</h1>\r\n                {/* {\r\n                    (this.state.users.length > 0) ?\r\n                        <BootstrapTable keyField='id' data={this.state.users} columns={columns} />\r\n                        :\r\n                        'No Data Found'\r\n                } */}\r\n\r\n                <MDBDataTable\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    data={data}\r\n                />\r\n\r\n                <Modal show={this.state.show} onHide={this.handleClose} size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Modal heading</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n          </Button>\r\n                        <Button variant=\"primary\" onClick={this.handleClose}>\r\n                            Save Changes\r\n          </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport Home from \"./home/Home\";\r\nimport UserList from \"./user-list/UserList\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router basename=\"/usermanagement\">\r\n            <Switch>\r\n                <Route path=\"/\" exact>\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/user-list\">\r\n                    <UserList />\r\n                </Route>\r\n\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}","import React from 'react';\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}